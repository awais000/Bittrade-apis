{"version":3,"sources":["../../server/azure/index.js"],"names":["uploadStream","BlockBlobURLFrom","containerUrlFrom","require","Aborter","BlockBlobURL","ContainerURL","ServiceURL","SharedKeyCredential","StorageURL","uploadStreamToBlockBlob","uploadFileToBlockBlob","streamifier","fs","path","process","env","NODE_ENV","config","STORAGE_ACCOUNT_NAME","AZURE_STORAGE_ACCOUNT_NAME","ACCOUNT_ACCESS_KEY","AZURE_STORAGE_ACCOUNT_ACCESS_KEY","ONE_MEGABYTE","FOUR_MEGABYTES","ONE_MINUTE","showContainerNames","aborter","serviceURL","response","marker","listContainersSegment","containerItems","container","console","log","name","uploadLocalFile","containerURL","filePath","resolve","fileName","basename","blockBlobURL","fromContainerURL","file","timeout","readStream","createReadStream","buffer","uploadOptions","bufferSize","maxBuffers","showBlobNames","listBlobFlatSegment","segment","blobItems","blob","execute","image","containerName","credentials","pipeline","newPipeline","fromServiceURL","filename"],"mappings":"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","file":"index.js","sourcesContent":["const {\r\n    Aborter,\r\n    BlockBlobURL,\r\n    ContainerURL,\r\n    ServiceURL,\r\n    SharedKeyCredential,\r\n    StorageURL,\r\n    uploadStreamToBlockBlob,\r\n    uploadFileToBlockBlob\r\n} = require('@azure/storage-blob');\r\nvar streamifier = require('streamifier');\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nimport uuid from 'uuid-v4';\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    require(\"dotenv\").config();\r\n}\r\n\r\nconst STORAGE_ACCOUNT_NAME = process.env.AZURE_STORAGE_ACCOUNT_NAME;\r\nconst ACCOUNT_ACCESS_KEY = process.env.AZURE_STORAGE_ACCOUNT_ACCESS_KEY;\r\n\r\nconst ONE_MEGABYTE = 1024 * 1024;\r\nconst FOUR_MEGABYTES = 4 * ONE_MEGABYTE;\r\nconst ONE_MINUTE = 60 * 1000;\r\n\r\nasync function showContainerNames(aborter, serviceURL) {\r\n\r\n    let response;\r\n    let marker;\r\n\r\n    do {\r\n        response = await serviceURL.listContainersSegment(aborter, marker);\r\n        marker = response.marker;\r\n        for(let container of response.containerItems) {\r\n            console.log(` - ${ container.name }`);\r\n        }\r\n    } while (marker);\r\n}\r\n\r\nasync function uploadLocalFile(aborter, containerURL, filePath) {\r\n\r\n    filePath = path.resolve(filePath);\r\n\r\n    const fileName = path.basename(filePath);\r\n    const blockBlobURL = BlockBlobURL.fromContainerURL(containerURL, fileName);\r\n\r\n    return await uploadFileToBlockBlob(aborter, filePath, blockBlobURL);\r\n}\r\n\r\nexport async function uploadStream( blockBlobURL,file) {\r\n    const aborter = Aborter.timeout(30 * ONE_MINUTE);\r\n    // filePath = path.resolve(filePath);\r\n\r\n    // const fileName = path.basename(filePath).replace('.md', '-.md');\r\n    var readStream =streamifier.createReadStream(file.buffer);\r\n    console.log(readStream)\r\n    //const blockBlobURL = BlockBlobURL.fromContainerURL(containerURL,`${Date.now()}-${uuid()}${file.originalname}`);\r\n\r\n    // const stream = fs.createReadStream(file, {\r\n    //   highWaterMark: FOUR_MEGABYTES,\r\n    // });\r\n\r\n    const uploadOptions = {\r\n        bufferSize: FOUR_MEGABYTES,\r\n        maxBuffers: 6,\r\n    };\r\n\r\n    return await uploadStreamToBlockBlob(\r\n                    aborter, \r\n                    readStream, \r\n                    blockBlobURL, \r\n                    uploadOptions.bufferSize, \r\n                    uploadOptions.maxBuffers);\r\n}\r\n\r\nasync function showBlobNames(aborter, containerURL) {\r\n\r\n    let response;\r\n    let marker;\r\n\r\n    do {\r\n        response = await containerURL.listBlobFlatSegment(aborter);\r\n        marker = response.marker;\r\n        for(let blob of response.segment.blobItems) {\r\n            console.log(` - ${ blob.name }`);\r\n        }\r\n    } while (marker);\r\n}\r\n\r\nexport default async function execute(image) {\r\n\r\n    const containerName = \"bittrade2015\";\r\n    // const blobName = \"quickstart.txt\";\r\n    // const content = \"hello!\";\r\n    //const localFilePath = \"./awaismanzoor.png\";\r\n\r\n    const credentials = new SharedKeyCredential(STORAGE_ACCOUNT_NAME, ACCOUNT_ACCESS_KEY);\r\n    const pipeline = StorageURL.newPipeline(credentials);\r\n    const serviceURL = new ServiceURL(`https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net`, pipeline);\r\n    \r\n    const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\n    //const blockBlobURL = BlockBlobURL.fromContainerURL(containerURL, blobName);\r\n    \r\n    \r\n\r\n    // console.log(\"Containers:\");\r\n    // await showContainerNames(aborter, serviceURL);\r\n\r\n    // await containerURL.create(aborter)\r\n    // .then(()=>console.log(`Container: \"${containerName}\" is created`))\r\n    // .catch(()=>console.log(`${containerName} alread Exist`));\r\n\r\n\r\n    // await blockBlobURL.upload(aborter, content, content.length);\r\n    // console.log(`Blob \"${blobName}\" is uploaded`);\r\n    \r\n    // await uploadLocalFile(aborter, containerURL, image) \r\n    // .then(()=> console.log(`Local file \"${image}\" is uploaded`))\r\n    // .catch(()=>console.log(`Local file \"${image}\" doesn't ex`))\r\n   \r\n    \r\n   return await uploadStream(aborter, containerURL, image)\r\n    // .then((data)=> {console.log(`Local file \"${image.originalname}\" is uploaded`)})\r\n    // .catch(()=>console.log(`Local file \"${image.originalname}\" doesn't ex`))\r\n    // console.log(`Local file \"${localFilePath}\" is uploaded as a stream`);\r\n\r\n    // console.log(`Blobs in \"${containerName}\" container:`)\r\n    // await showBlobNames(aborter, containerURL);\r\n\r\n    // const downloadResponse = await blockBlobURL.download(aborter, 0);\r\n    // const downloadedContent = downloadResponse.readableStreamBody.read(content.length).toString();\r\n    // console.log(`Downloaded blob content: \"${downloadedContent}\"`);\r\n\r\n    // await blockBlobURL.delete(aborter)\r\n    // console.log(`Block blob \"${blobName}\" is deleted`);\r\n    \r\n    // await containerURL.delete(aborter);\r\n    // console.log(`Container \"${containerName}\" is deleted`);\r\n}\r\n\r\nexport function BlockBlobURLFrom(containerURL,filename){\r\n   const blockBlobURL = BlockBlobURL.fromContainerURL(containerURL,filename);\r\n   return blockBlobURL;\r\n}\r\n\r\nexport function containerUrlFrom(){\r\n    const containerName = \"bittrade2015\";\r\n    const credentials = new SharedKeyCredential(STORAGE_ACCOUNT_NAME, ACCOUNT_ACCESS_KEY);\r\n    const pipeline = StorageURL.newPipeline(credentials);\r\n    const serviceURL = new ServiceURL(`https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net`, pipeline);\r\n    \r\n    const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\nreturn  containerURL;\r\n}\r\n//execute().then(() => console.log(\"Done\")).catch((e) => console.log(e));\r\n"]}